<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>InnerPeace&#39;s Blog</title>
  
  <subtitle>做自己的太阳</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-02T08:56:46.371Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.Tian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于Python工程师的面试题（一）</title>
    <link href="http://yoursite.com/2019/09/02/%E5%85%B3%E4%BA%8EPython%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/09/02/关于Python工程师的面试题（一）/</id>
    <published>2019-09-02T08:47:50.000Z</published>
    <updated>2019-09-02T08:56:46.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何提高python的运行效率？"><a href="#如何提高python的运行效率？" class="headerlink" title="如何提高python的运行效率？"></a>如何提高python的运行效率？</h2><p>答：<br>使用生成器；关键代码使用外部功能，针对循环的优化-尽量避免在循环中访问变量的属性。</p><h2 id="什么是生成器？"><a href="#什么是生成器？" class="headerlink" title="什么是生成器？"></a>什么是生成器？</h2><p>答：<br>我们创建列表的时候，受到内存限制，容量肯定是有限的，而且不可能全部给他一次枚举出来。这里可以使用列表生成式，但是它有一个致命的缺点就是定义即生成，非常的浪费空间和效率。</p><p>所以，如果列表元素可以按照某种算法推算出来，那我们可以在循环的过程中不断推算出后续的元素,这样就不必创建完整的list，从而节省大量的空间。<strong>在Python中，这种一边循环一边计算的机制，称为生成器：generator</strong>。</p><p>要创建一个 generator ，最简单的方法是改造列表生成式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x*x for x in range(10)] # 列表推导式 --&gt; (x * x for x in range(10)) # 生成器</span><br></pre></td></tr></table></figure><h2 id="什么是可迭代对象？"><a href="#什么是可迭代对象？" class="headerlink" title="什么是可迭代对象？"></a>什么是可迭代对象？</h2><p>答：<br>简单的来理解就是可以使用for循环遍历的对象。比如常见的list、set和dict。<br>可以使用测试对象是否是可迭代：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from collections import Iterable</span><br><span class="line">isinstance(对象，Iterable)</span><br></pre></td></tr></table></figure><h2 id="什么是迭代器？"><a href="#什么是迭代器？" class="headerlink" title="什么是迭代器？"></a>什么是迭代器？</h2><p>答：<br>迭代器是一个可以记住遍历的位置的对象。</p><p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p><p>迭代器有两个基本的方法：iter() 和 next()。</p><h2 id="什么是装饰器？"><a href="#什么是装饰器？" class="headerlink" title="什么是装饰器？"></a>什么是装饰器？</h2><p>答：<br>装饰器（Decorator）是python中最吸引人的特性，装饰器本质上还是一个函数，它可以让已有的函数不做任何改动的情况下增加功能。</p><h2 id="生成器、迭代器和可迭代对象的区别和应用？"><a href="#生成器、迭代器和可迭代对象的区别和应用？" class="headerlink" title="生成器、迭代器和可迭代对象的区别和应用？"></a>生成器、迭代器和可迭代对象的区别和应用？</h2><p>答：<br>能使用for循环遍历的叫可迭代对象，能使用next方法的就是迭代器，生成器是特殊的迭代器。</p><h2 id="python中yield的用法？"><a href="#python中yield的用法？" class="headerlink" title="python中yield的用法？"></a>python中yield的用法？</h2><p>答：<br>yield简单来说是一个生成器，这样函数记住上次返回时在函数中的位置，对于生成器第二次或n次调用跳转至该函数。</p><h2 id="python中如何进行内存管理的？"><a href="#python中如何进行内存管理的？" class="headerlink" title="python中如何进行内存管理的？"></a>python中如何进行内存管理的？</h2><p>答：<br>垃圾回收、内存池机制</p><h2 id="描述数组，链表，队列，堆栈的区别？"><a href="#描述数组，链表，队列，堆栈的区别？" class="headerlink" title="描述数组，链表，队列，堆栈的区别？"></a>描述数组，链表，队列，堆栈的区别？</h2><p>答：<br>数组和链表时存储方式的概念，数组在连续的空间中存储数据，链表在非连续的空间中存储数据<br>队列和堆栈时描述数据存取的方法概念，队列是先进先出，而堆栈是后进后出，队列和堆栈可以用链表来实现，也可以用数组来实现。</p><h2 id="如何实现0-100的和？"><a href="#如何实现0-100的和？" class="headerlink" title="如何实现0-100的和？"></a>如何实现0-100的和？</h2><p>答：<br>sum(range(0,101))</p><h2 id="请说几个python的标准库"><a href="#请说几个python的标准库" class="headerlink" title="请说几个python的标准库"></a>请说几个python的标准库</h2><p>答：<br>os：操作系统相关联的函数<br>datetime：日期时间<br>sys：命令行参数<br>re：正则匹配<br>math：数学运算</p><h2 id="字典如何删除键和合并两个字典的？"><a href="#字典如何删除键和合并两个字典的？" class="headerlink" title="字典如何删除键和合并两个字典的？"></a>字典如何删除键和合并两个字典的？</h2><p>答：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict_first = &#123;&apos;name&apos;: &apos;wangwu&apos;, &apos;age&apos;: 20&#125;</span><br><span class="line">del.dict_first[&apos;name&apos;] # 删除键</span><br><span class="line">dict_second[&apos;gender&apos;: &apos;female&apos;&#125;</span><br><span class="line">dict_first.update(dict_second) # 字典合并</span><br></pre></td></tr></table></figure><h2 id="谈一谈python中的GIL"><a href="#谈一谈python中的GIL" class="headerlink" title="谈一谈python中的GIL"></a>谈一谈python中的GIL</h2><p>答：<br>GIL是python中的全局解释其所。<br>每个线程在执行的过程都需要先获取GIL，保证同一时刻只有一个线程可以执行代码。<br>1、什么时候释放GIL锁？<br>答：<br>① 时间片耗尽（cpu时间）<br>② 任务遇到I/O等待<br>③ 任务结束后</p><h2 id="GIL和互斥锁的区别"><a href="#GIL和互斥锁的区别" class="headerlink" title="GIL和互斥锁的区别"></a>GIL和互斥锁的区别</h2><p>答：<br>GIL是全局解释器锁，是解释器层面的，不可控的。<br>互斥锁是代码层面的锁，是可控的<br>GIL和互斥锁都是解决共享资源竞争的问题</p><h2 id="python中的可变类型与不可变类型"><a href="#python中的可变类型与不可变类型" class="headerlink" title="python中的可变类型与不可变类型"></a>python中的可变类型与不可变类型</h2><p>答：<br>可变类型：在原来的内存地址上修改元素，比如：列表字典<br>不可变类型：不会在原来的内存地址上修改元素，而是指向了一个新的内存引用，比如整型、字符串、元组</p><h2 id="break和continue的区别"><a href="#break和continue的区别" class="headerlink" title="break和continue的区别"></a>break和continue的区别</h2><p>答：<br>continue是跳过本次循环，继续执行下一次循环<br>break是结束整个循环</p><h2 id="对不定长参数的理解？"><a href="#对不定长参数的理解？" class="headerlink" title="对不定长参数的理解？"></a>对不定长参数的理解？</h2><p>答：<br><em>args：可以接收任意多个实参，用元组类型保存数据。<br>*</em>kwargs：可以接收任意多个的命名参数，用子弹类型保存</p><h2 id="对缺省参数的理解？"><a href="#对缺省参数的理解？" class="headerlink" title="对缺省参数的理解？"></a>对缺省参数的理解？</h2><p>答：<br>在调用函数时，缺省参数的值如果没有传入，则被认为是默认值，缺省参数一定要位于参数列表的最后面。</p><h2 id="什么是lambda函数？"><a href="#什么是lambda函数？" class="headerlink" title="什么是lambda函数？"></a>什么是lambda函数？</h2><p>答：<br>Lambda函数能接收任何数量的参数但只能返回一个表达式的值<br>匿名函数不能直接调用print，因此lambda需要一个表达式</p><h2 id="read、readline和readlines的区别"><a href="#read、readline和readlines的区别" class="headerlink" title="read、readline和readlines的区别"></a>read、readline和readlines的区别</h2><p>答：<br>read()：读取整个文件<br>read(num)：读取文件中的数据长度，单位为字节<br>readline()：读取一行<br>readlines()：读取所有内容并返回一个列表</p><h2 id="上下文管理器了解吗？"><a href="#上下文管理器了解吗？" class="headerlink" title="上下文管理器了解吗？"></a>上下文管理器了解吗？</h2><p>答：<br>with有两个方法，一个是enter，它主要负责上下文的准备工作，一般是打开文件，准备环境；另一个是exit主要负责善后工作，比如关闭文件，一些回收机制。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何提高python的运行效率？&quot;&gt;&lt;a href=&quot;#如何提高python的运行效率？&quot; class=&quot;headerlink&quot; title=&quot;如何提高python的运行效率？&quot;&gt;&lt;/a&gt;如何提高python的运行效率？&lt;/h2&gt;&lt;p&gt;答：&lt;br&gt;使用生成器；关键
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="http://yoursite.com/2017/09/01/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2017/09/01/Hexo博客搭建/</id>
    <published>2017-09-01T08:23:10.000Z</published>
    <updated>2019-09-02T01:46:01.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>Hexo 是高效的静态站点生成框架，她基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。在这篇文章中，假定你已经成功安装了 Hexo，并使用 Hexo 提供的命令创建了一个站点。</p><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vx：My19950420</span><br><span class="line">qq：945153590</span><br></pre></td></tr></table></figure><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1、GitHub账号，官网:<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br>2、node.js、npm，下载地址：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a>   中文文档地址：<a href="http://nodejs.cn/api/" target="_blank" rel="noopener">http://nodejs.cn/api/</a><br>3、git for windows 教程参考：<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600</a><br>4、域名，这里我用的是阿里云的域名，当然你也可不绑定域名，那么访问的时候就直接访问XXX.github.io</p><h2 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h2><p>  新建一个名为你的&lt;用户名&gt;.github.io的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效）</p><h3 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"邮件地址"</span> <span class="comment">#不加引号</span></span><br></pre></td></tr></table></figure><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录（C:\Users\你的用户名\.ssh），找到id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key,将刚复制的内容粘贴到key那里，title随便填，保存。</p><h3 id="测试配置是否成功"><a href="#测试配置是否成功" class="headerlink" title="测试配置是否成功"></a>测试配置是否成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com <span class="comment"># 注意邮箱地址不用改</span></span><br></pre></td></tr></table></figure><p>如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：<br>Hi XXXXX! You’ve successfully authenticated, but GitHub does not provide shell access.<br>看到这个信息说明SSH已配置成功！<br>此时你还需要配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"username"</span> <span class="comment"># 你的github用户名，非昵称</span></span><br><span class="line">git config --global user.email  <span class="string">"xxx@qq.com"</span> <span class="comment"># 填写你的github注册邮箱</span></span><br></pre></td></tr></table></figure><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init 项目名 <span class="comment"># 目录具体位置一定要选好，这个是将来存放代码的地方</span></span><br></pre></td></tr></table></figure><p>进入你的项目内：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g # 生成</span><br><span class="line">hexo s # 启动服务</span><br></pre></td></tr></table></figure><p>打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容</p><h3 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h3><p>参考博客：<a href="https://io-oi.me/tech/hexo-next-optimization/" target="_blank" rel="noopener">https://io-oi.me/tech/hexo-next-optimization/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;Hexo 是高效的静态站点生成框架，她基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markd
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
