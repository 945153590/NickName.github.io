<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>InnerPeace&#39;s Blog</title>
  
  <subtitle>做自己的太阳</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-21T07:24:53.391Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.Tian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于Python工程师的面试题（三）</title>
    <link href="http://yoursite.com/2019/09/21/%E5%85%B3%E4%BA%8EPython%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2019/09/21/关于Python工程师的面试题（三）/</id>
    <published>2019-09-21T06:59:56.000Z</published>
    <updated>2019-09-21T07:24:53.391Z</updated>
    
    <content type="html"><![CDATA[<h3 id="进程的有哪几种状态以及导致转换的事件。"><a href="#进程的有哪几种状态以及导致转换的事件。" class="headerlink" title="进程的有哪几种状态以及导致转换的事件。"></a>进程的有哪几种状态以及导致转换的事件。</h3><p>进程有5种状态：<br>运行态：该进程正在执行。<br>就绪态：进程已经做好了准备，只要有机会就开始执行<br>阻塞态（等待态）：进程在某些事情发生前不能执行，等待阻塞进程的事件完成<br>新建态：刚刚创建的进程，操作系统还没有把它加入到可执行进程组中，通常是进程控制块已经创建但是还没有加载到内存中的进程。<br>退出态：操作系统从可执行进程组中释放出的进程，由于自身或某种原因停止运行。<br>导致转换的事件：</p><ol><li>空-&gt;新建：创建执行一个程序的新进程，可能的事件有：新的批处理作业、交互登录（终端用户登录到系统）、操作系统因为提供一项服务而创建、由现有的进程派生等。</li><li>新建-&gt;就绪：操作系统准备好再接纳一个进程时，把一个进程从新建态转换为就绪态。</li><li>就绪-&gt;运行：需要选择一个新进程运行时，操作系统的调度器或分配器根据某种调度算法选择一个处于就绪态的进程。</li><li>运行-&gt;退出：导致进程终止的原因有：正常完成、超过时限、系统无法满足进程需要的内存空间、进程试图访问不允许访问的内存单元（越界）、算术错误（如除以0或存储大于硬件可以接纳的数字）、父进程终止（操作系统可能会自动终止该进程所有的后代进程）、父进程请求终止后代进程等。</li><li>运行-&gt;就绪：最常见的原因是，正在运行的进程到达了“允许不中断执行”的最大时间段，该把处理器的资源释放给其他在就绪态的进程使用了；还有一中原因可能是由于具有更改优先级的就绪态进程抢占了该进程的资源，使其被中断转换到就绪态。</li><li>运行-&gt;阻塞：如果进程请求它必须等待的某些事件，例如一个无法立即得到的资源（如I/O操作），只有在获得等待的资源后才能继续进程的执行，则进入等待态（阻塞态）。</li><li>阻塞-&gt;就绪：当等待的事件发生时，处于阻塞态的进程转换到就绪态。</li><li>就绪-&gt;退出：在上图中没有标出这种转换，在某些进程中，父进程可以在任何时刻终止一个子进程，如果一个父进程终止，所有相关的子进程都被终止。</li><li>阻塞-&gt;退出：跟上一项原因类似。</li></ol><h3 id="进程与线程的区别。"><a href="#进程与线程的区别。" class="headerlink" title="进程与线程的区别。"></a>进程与线程的区别。</h3><p>进程是资源分配的最小单位，线程是程序执行的最小单位。进程有自己的独立的地址空间， 线程共享进程中的数据，使用相同的地址空间。进程自己通信方式主要使用特别的方式来进行通信。线程之间的通信非常的方便， 同一进程下的线程共享全局变量、静态变量等数据。多进程程序更加的健壮，其中一个进程死掉了并不影响其他的进程，多线程中只要有一个线程死掉，那么整个进程也死掉了。</p><h3 id="进程通信的几种方式。"><a href="#进程通信的几种方式。" class="headerlink" title="进程通信的几种方式。"></a>进程通信的几种方式。</h3><p>进程之间进行通信常用的有几种方式：管道，消息队列， 信号量， 共享内存<br>管道通常指无名管道， 他的特点包括：<br>1.半双工：数据只能在一个方向流动，一端为读端，一端为写端<br>2.有关系进程通信： 管道只能在具有亲缘关系的进程之间进行通信，如父子进程、兄弟进程<br>3.文件： 管道是一种特殊的文件它有着像普通文件读写一样的API， 它只存在于内存中。<br>Python实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">from time import sleep</span><br><span class="line">def child(wpipe):</span><br><span class="line">    while 1:</span><br><span class="line">        msg = &quot;hello world!&quot;.encode()</span><br><span class="line">        os.write(wpipe, msg)</span><br><span class="line">        sleep(2)</span><br><span class="line">def parent():</span><br><span class="line">    rpipe, wpipe = os.pipe()</span><br><span class="line">    pid = os.fork()</span><br><span class="line">    if pid == 0:</span><br><span class="line">        child(wpipe)</span><br><span class="line">    else:</span><br><span class="line">        os.close(wpipe)</span><br><span class="line">        fb = os.fdopen(rpipe, &apos;r&apos;)</span><br><span class="line">        while 1:</span><br><span class="line">            recv = os.read(rpipe, 1024)</span><br><span class="line">            print(recv.decode())</span><br><span class="line">parent()</span><br><span class="line"># 输出</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&gt;&gt;&gt; python3.6 ./pipe.py </span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">hello world!</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p>消息队列存放在内核中， 一个消息队列有一个标识符来标识， 它的特点：<br>1.消息队列是面向记录的， 其中消息具有特定的格式和特点的优先级<br>2.消息队列独立于发送方和接受方，即使进程终止，消息队列中的消息并不会被删除。所以它可以用于无关进程之间通信<br>3.消息队列可以对消息实现随机读取， 不需要按在特定的顺序来读取。<br>信号量属于系统层面， linux系统也是通过信号量来管理进程，进程一旦接收到信号就会打断原来的程序执行流程来处理信号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import signal</span><br><span class="line">def handler(signalnum, frame):</span><br><span class="line">    global receive_times</span><br><span class="line">    print(&quot;收到信号&quot;, signalnum, frame)</span><br><span class="line">def main():</span><br><span class="line">    print(os.getpid())</span><br><span class="line">    signal.signal(signal.SIGTERM, handler)</span><br><span class="line">    while True:</span><br><span class="line">        pass</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>运行上面程序， 在另一个终端输入 kill pid,程序将会打印<br>…收到信号 15 &lt;frame object at 0x7ff6ea259630&gt;<br>共享内存是最简单的通信方式， 他允许多个进程（无关进程， 有关进程）访问同一片内存， 一个进程改变其中的数据后， 其他的进程也能看见数据的变化。共享内存特点：<br>1.进程共享同一块内存</p><ol start="2"><li>访问共享内存和访问私有内存一样快</li><li>不需要系统调用和内核入口</li><li>不造成不必要的内存复制Python可以使用multiprocessing中Value、Array、Manager等等实现</li></ol><h3 id="线程同步几种方式"><a href="#线程同步几种方式" class="headerlink" title="线程同步几种方式"></a>线程同步几种方式</h3><p>线程同步通常有4中方式： 临界区、事件、互斥量、信号量。<br>临界区：拥有临界区的线程可以访问被保护起来的资源或者代码段， 其他线程如果想访问则被挂起， 直到拥有临界区对象放弃临界区为止。Python中使用：threading.Lock()实现。<br>事件：可以自定义一个事件， 如果这个事件一直不发生， 则这些线程将会阻塞， 直到事件发生。 Python中使用threading.Event()实现 。<br>互斥量：互斥量为资源引入了状态：锁定/非锁定， 某个线程要更改共享数据时， 先将其锁定， 此时其他线程不能对该资源进行操作， 直到资源被释放。Python中使用threading.Lock()实现 。</p><h3 id="用户线程与内核线程的区别"><a href="#用户线程与内核线程的区别" class="headerlink" title="用户线程与内核线程的区别"></a>用户线程与内核线程的区别</h3><p>用户线程的优点：<br>1.线程切换不需要内核态特权， 进程不需要为了线程管理而切换到内核态。</p><ol start="2"><li>可以为应用程序量身定做调度算法而不影响系统调度程序。</li><li>用户级线程可以再多个平台上运行， 不需要对内核进行修改以支持用户级线程。<br>用户线程的缺点：</li><li>当一个用户级线程执行一个系统调用时， 不仅这个线程会被阻塞， 进程中的所有线程都会被阻塞。</li><li>在用户级线程策略中， 一个多线程应用程序不能利用多处理技术。<br>内核级线程优点：</li><li>线程切换由内核控制，可以很好的利用多核CPU。</li><li>由操作系统内核创建和撤销， 一个内核级线程阻塞并不影响其他的线程运行。<br>内核级线程缺点：    1.由内核进行调度。不能跨平台。用户级线程和内核级线程的区别：</li><li>内核线程是内核可感知的， 用户级线程是内核不可感知的。</li><li>用户级线程创建，撤销等等不需要内核的支持， 内核级线程创建，撤销等等都需要内核的支持。</li><li>用户级线程在调用系统指令是会导致其所属的进程被中断， 内核级线程在调用系统指令时， 只会导致该线程被中断， 与其他线程无关。</li><li>用户级线程CPU调度以进程为单位， 用户程序进行线程的控制， 内核级线程CPU以线程为调度单位， 由系统的线程调度程序负责线程的调度工作。</li><li>用户级线程的程序实体运行在用户态下程序， 而内核级线程的程序则可以运行在任何状态上。</li></ol><h3 id="进程池、线程池的原理？"><a href="#进程池、线程池的原理？" class="headerlink" title="进程池、线程池的原理？"></a>进程池、线程池的原理？</h3><p>线程池： 开启一定数量的线程并让其睡眠， 当需要一个线程去执行某种任务时， 唤醒某个线程让它执行任务， 任务执行完毕又让其睡眠。<br>进程池同理</p><h3 id="进程为什么会产生死锁？"><a href="#进程为什么会产生死锁？" class="headerlink" title="进程为什么会产生死锁？"></a>进程为什么会产生死锁？</h3><p>导致死锁的原因：<br>1.因为系统资源不足<br>2.进程运行推进顺序不合适<br>3.资源分配不当<br>导致死锁的四个必要条件：<br>1.一次一个进程只能访问一个资源， 其他进程不能访问已分配的资源。<br>2.当一个进程等待其他进程时， 继续占有已分配的资源时<br>3.不能强行抢占进程已有的资源<br>4.存在一个封闭的进程链， 导致每一个进程都占有下一个进程所需的资源</p><h3 id="操作系统的四个特性？"><a href="#操作系统的四个特性？" class="headerlink" title="操作系统的四个特性？"></a>操作系统的四个特性？</h3><p>1.并行： 并行是指两个事件以上（包含）在同一时刻发生既物理上这些事件是同时发生的。<br>2.共享： 系统中的资源可供内存中的多个进程共同使用， 由于资源的属性不同， 多个进程对资源共享方式也不同。<br>3.虚拟：操作系统中的虚拟通过分时技术将多个物理设备转换成若干个逻辑上的对应物。<br>4.异步：在多道程序设计环境下允许多个进程并发执行。</p><h3 id="什么是缓冲区溢出？有什么危害？其原因是什么？"><a href="#什么是缓冲区溢出？有什么危害？其原因是什么？" class="headerlink" title="什么是缓冲区溢出？有什么危害？其原因是什么？"></a>什么是缓冲区溢出？有什么危害？其原因是什么？</h3><p>缓存区溢出指计算机在向缓存区填充数据时超过了缓存区的最大值， 溢出的数据覆盖在了合法数据上。<br>其危害： 程序崩溃， 导致拒绝服务。跳转并执行恶意代码。<br>造成缓存区溢出的原因主要是没有对用户的输入进行检查。</p><h3 id="操作系统中进程调度策略有哪几种？"><a href="#操作系统中进程调度策略有哪几种？" class="headerlink" title="操作系统中进程调度策略有哪几种？"></a>操作系统中进程调度策略有哪几种？</h3><p>优先级服务，时间片轮换， 多级反馈</p><h3 id="TCP为什么需要3次握手"><a href="#TCP为什么需要3次握手" class="headerlink" title="TCP为什么需要3次握手"></a>TCP为什么需要3次握手</h3><p>三次握手的目的是：防止已失效的连接请求报文又传入到服务端，导致错误。</p><h3 id="TCP和UDP有什么区别？"><a href="#TCP和UDP有什么区别？" class="headerlink" title="TCP和UDP有什么区别？"></a>TCP和UDP有什么区别？</h3><p>tcp是传输控制协议，其提供面向连接、可靠的字节流服务，通信双方必须依照三次握手协议连接之后才能传输数据， tcp提供了超时重传、 丢弃重复数据、检验数据流量控制等功能。UDP是用户数据包协议， 它提供了一个简单的不可靠的面向无连接的服务，在双方未连接时也能传输数据因而速度特别快。</p><h3 id="TCP-IP的流量控制？"><a href="#TCP-IP的流量控制？" class="headerlink" title="TCP/IP的流量控制？"></a>TCP/IP的流量控制？</h3><p>利用滑动窗口实现流量控制</p><h3 id="HTTP的长连接和短连接"><a href="#HTTP的长连接和短连接" class="headerlink" title="HTTP的长连接和短连接?"></a>HTTP的长连接和短连接?</h3><p>短连接： 客户端与服务端每进行一次HTTP操作就建立一次连接，请求结束就断开连接。<br>长连接：客户端与服务器进行第一次HTTP操作后， TCP连接并不会断开连接， 下次请求将复用这条TCP通道</p><h3 id="IO中同步与异步，阻塞与非阻塞区别"><a href="#IO中同步与异步，阻塞与非阻塞区别" class="headerlink" title="IO中同步与异步，阻塞与非阻塞区别"></a>IO中同步与异步，阻塞与非阻塞区别</h3><p>同步和异步关注的是消息通信机制。<br>同步：发出一个调用时， 在没有得到结果之前这个调用不会返回结果， 如果调用返回那么说明得到结果了。<br>异步：发出一个调用后立刻返回， 但是返回时没有结果的。<br>阻塞与非阻塞关注的是程序在等待调用的结果<br>阻塞：调用结果被返回前该线程被挂起， 直到得到结果后，该线程继续运行。<br>非阻塞：不能立刻得到结果之前， 该函数不会阻塞当前线程， 会立刻返回。</p><h3 id="Cookies-和-Session的区别"><a href="#Cookies-和-Session的区别" class="headerlink" title="Cookies 和 Session的区别"></a>Cookies 和 Session的区别</h3><p>cookies是一种保存在客户端上的字符串用于用户与服务端会话持久的保持数据<br>Session是一种保存在服务器的字符串， 其功能与cookies相同， 但是session是在cookies基础上实现的。</p><h3 id="什么是TCP粘包、TCP粘包发生了怎么处理？"><a href="#什么是TCP粘包、TCP粘包发生了怎么处理？" class="headerlink" title="什么是TCP粘包、TCP粘包发生了怎么处理？"></a>什么是TCP粘包、TCP粘包发生了怎么处理？</h3><p>TCP粘包是指发送方发送了若干个包到接收方接受时都粘成了一个包， 从缓存区来看后一个包的头部数据紧紧的接着前一个包的尾部。<br>对于TCP粘包的情况有两种处理方式：</p><ol><li>接收方： 可以选择关闭tcp默认的nagle算法来避免粘包</li><li>应用层处理： 格式化数据， 对于每一条数据都采用相同的格式必须有开始符以及结束符， 这样即使发生粘包也可以通过开始符和结束符判断数据边界， 也可以在数据开头就将该条数据的长度填充进数据中， 如果发生粘包则可以使用数据长度来区分每一条数据。<br>UDP不会发生粘包， 因为UDP没有使用块的合并优化算法，导致接收端的缓存区内按照链式的结构来储存每一个UDP包， 并且每一个UDP包都有消息头，这样接收方就很好的进行拆包。</li></ol><h3 id="TCP中的time-wait是什么情况？出现过多的close-wait可能是什么原因？"><a href="#TCP中的time-wait是什么情况？出现过多的close-wait可能是什么原因？" class="headerlink" title="TCP中的time_wait是什么情况？出现过多的close_wait可能是什么原因？"></a>TCP中的time_wait是什么情况？出现过多的close_wait可能是什么原因？</h3><p>timewait值tcp中主动断开连接一方的一个状态， 当主动断开连接的一方发送给对方FIN包，且对方回复了ACK+FIN时， 主动断开连接的一方将进入time_wait状态， 并持续到2msl后进入CLOSE状态。<br>出现过多的close_wait的原因：被动关闭方未关闭socket造成。<br>解决办法：<br>1.为socket设置超时<br>2.调整系统参数， 包括句柄参数和TCP/IP参数</p><h3 id="epoll-select的区别？边缘触发，水平触发区别？"><a href="#epoll-select的区别？边缘触发，水平触发区别？" class="headerlink" title="epoll,select的区别？边缘触发，水平触发区别？"></a>epoll,select的区别？边缘触发，水平触发区别？</h3><p>epoll将每一个监听事件都储存在了红黑树中并且只返回被触发的事件。epoll在睡眠结束后只需要检测就绪链表是否为空。select则将时间都放入一个列表中， 当其中某个事件被触发时，select将所有的事件返回给用户。select睡眠结束后需要遍所有的监听事件。</p><h3 id="数据库事务的四个特性及含义"><a href="#数据库事务的四个特性及含义" class="headerlink" title="数据库事务的四个特性及含义"></a>数据库事务的四个特性及含义</h3><p>数据库事务的4个特性：原子性、持久性、一致性、隔离性<br>原子性：整个事务中的所有操作要么全部完成， 要么全部都不完成， 如果在事务中操作出现异常，那么事务将会进行回滚， 就像这个事务从来没有执行过一样。<br>持久性：在事务完成后，该事务所有的操作都将持久化在数据库中， 不会被回滚。<br>一致性：在事务开始之前和事务结束之后， 数据库的完整性约束并没有被破坏。<br>隔离性：确保在同一时间类只有一个事务处理某个数据。</p><h3 id="数据库索引使用了什么数据结构？"><a href="#数据库索引使用了什么数据结构？" class="headerlink" title="数据库索引使用了什么数据结构？"></a>数据库索引使用了什么数据结构？</h3><p>数据库索引对于非主键索引使用B树， 对于主键索引使用B+树</p><h3 id="数据库优化的思路"><a href="#数据库优化的思路" class="headerlink" title="数据库优化的思路"></a>数据库优化的思路</h3><p>SQL语句优化：</p><ol><li>尽量避免在where语句后面使用 !=、&lt;&gt;操作符以及对NULL值得判断， 否则引擎将放弃索引而使用全表扫描。</li><li>使用exists替换in。</li><li>尽量放弃使用select *， 需要什么数据就取出什么数据。</li><li>使用join代替子查询。</li><li>设置合适的字段属性：例如尽量把字段设置为NOT NULL， 这样引擎就不要对比NULL值</li></ol><h3 id="MySQL中myisam与innodb的区别"><a href="#MySQL中myisam与innodb的区别" class="headerlink" title="MySQL中myisam与innodb的区别"></a>MySQL中myisam与innodb的区别</h3><ol><li>innodb支持事物， myisam不支持事物</li><li>innodb支持行级锁， myisam支持表级锁</li><li>innodb支持MVC， myisam不支持</li><li>innodb支持外键， myisam不支持</li><li>innodb不支持全文索引，myisam支持</li></ol><h3 id="Redis支持的数据类型"><a href="#Redis支持的数据类型" class="headerlink" title="Redis支持的数据类型"></a>Redis支持的数据类型</h3><p>字符串，集合， 有序集合，哈希， 列表</p><h3 id="redis持久化的几种方式"><a href="#redis持久化的几种方式" class="headerlink" title="redis持久化的几种方式"></a>redis持久化的几种方式</h3><ol><li>快照： 默认使用这种方式，将数据快照存放在特定的二进制文件中。</li><li>AOF: 将每一条命令都储存， 恢复时再将每一天命令进行运行。</li></ol><h3 id="redis如何实现热数据缓存？"><a href="#redis如何实现热数据缓存？" class="headerlink" title="redis如何实现热数据缓存？"></a>redis如何实现热数据缓存？</h3><p>当redis的内存数据大小上升到一定大小时， 就会实施数据淘汰策略， redis提供了6中数据淘汰策略<br>volatile-LRU：从已经设置过期时间的数据中挑选最近最少使用的数据淘汰<br>volatile-TTL： 从已经设置过期时间的数据中挑选即将要过期的数据淘汰<br>volatile-RANDOM： 从已经设置过期时间的数据中随机选择数据进行淘汰<br>allkeys-LRU：从数据集中挑选最近最少使用的数据淘汰<br>allkeys-random：从数据集中任意选择数据淘汰<br>no-enviction：禁止驱逐数据</p><h3 id="Redis-常见的性能问题都有哪些？"><a href="#Redis-常见的性能问题都有哪些？" class="headerlink" title="Redis 常见的性能问题都有哪些？"></a>Redis 常见的性能问题都有哪些？</h3><ol><li>master写内存快照， save命令调度rdbSave函数会阻塞主线程的工作， 可能会导致间断性的暂停服务。</li><li>master AOF持久化， 最好不要使用AOF来进行持久化， 这个持久化方式对性能有着极大的影响。</li><li>redis主从复制的性能问题，为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内。</li></ol><h3 id="mysql字符集和排序规则？"><a href="#mysql字符集和排序规则？" class="headerlink" title="mysql字符集和排序规则？"></a>mysql字符集和排序规则？</h3><p>mysql中一个字符集至少有一个或者多个排序方式， 比如utf8就有：utf8_general_ci , utf8_general_cs等等。<br>排序规则命名规则：字符集名字_语言_后缀， 其中</p><ol><li>_ci：不区分大小写的排序方式 </li><li>_cs：区分大小写的排序方式</li><li>_bin：二进制排序方式，大小比较将根据字符编码，不涉及人类语言，因此_bin的排序方式不包含人类语言<br>字符集最常用的包括utf8, utf8md4。</li></ol><h3 id="varchar与char的区别是什么？大小限制？utf8字符集下varchar最多能存多少个字符？"><a href="#varchar与char的区别是什么？大小限制？utf8字符集下varchar最多能存多少个字符？" class="headerlink" title="varchar与char的区别是什么？大小限制？utf8字符集下varchar最多能存多少个字符？"></a>varchar与char的区别是什么？大小限制？utf8字符集下varchar最多能存多少个字符？</h3><p>char和varchar最大的不同就是一个是固定长度,一个是可变长度。由于是可变长度,因此存储的是实际字符串再加上一个记录字符串长度的字节。如果分配给char或varchar列的值超过 列的最大长度,则对值进行裁剪。<br>varchar(M)和char(M),M都表示字符数.varchar的最大长度为65535个字节,不同的编码所对应的最大可存储的字符数不同。char最多可以存放255个字符,不同的编码最大可用字节数不同。<br>字符类型若为utf8，每个字符最多占3个字节，varchar最大长度不能超过21845。</p><h3 id="primary-key和unique的区别？"><a href="#primary-key和unique的区别？" class="headerlink" title="primary key和unique的区别？"></a>primary key和unique的区别？</h3><p>一个表只能有一个primary key， 一个表可以有多个unique key。<br>unique key约束只针对非主键列， 可以为空值， primary key约束针对主键列， 不允许有空值。</p><h3 id="外键有什么用，是否该用外键？外键一定需要索引吗？"><a href="#外键有什么用，是否该用外键？外键一定需要索引吗？" class="headerlink" title="外键有什么用，是否该用外键？外键一定需要索引吗？"></a>外键有什么用，是否该用外键？外键一定需要索引吗？</h3><p>外键是为了一张表记录的数据不会太过冗余，也是为了数据的一致性和完整性。<br>如果业务逻辑相当的复杂那么建议使用外键来保证数据的一致性和完整性， 如果业务逻辑不复杂则可以不使用外键， 仅靠程序中来保证数据的一致性和完整性， 或者业务对数据的一致性完整性要求相当的高， 那么一定要用外键。同时如果为了不让mysql在性能有任何的形象应该避免使用外键。 所有应该视当前业务，数据等情况决定是否使用外键。<br>外键需要索引， 因为外键在查询，更新，删除数据时会对数据进行查找， 所以需要对外键建立索引。</p><h3 id="索引有什么用？"><a href="#索引有什么用？" class="headerlink" title="索引有什么用？"></a>索引有什么用？</h3><p>对于建立索引的列， mysql的查询效率会提高很多。</p><h3 id="谈谈redis的事务？用事务模拟原子-1操作？原子操作还有其它解决方案吗？"><a href="#谈谈redis的事务？用事务模拟原子-1操作？原子操作还有其它解决方案吗？" class="headerlink" title="谈谈redis的事务？用事务模拟原子+1操作？原子操作还有其它解决方案吗？"></a>谈谈redis的事务？用事务模拟原子+1操作？原子操作还有其它解决方案吗？</h3><p>redis的事务使用关键字multi开启事务， 使用exec执行事务中的语句，它可以执行多条语句， 所有的命令按照先进先运行的的运行， 不会被其他的命令加塞。<br>用事务模拟原子+1操作：<br>multi<br>incr xx<br>exec<br>原子操作 可以使用 incr操作实现</p><h3 id="redis集群？"><a href="#redis集群？" class="headerlink" title="redis集群？"></a>redis集群？</h3><p>redis-cluster</p><h3 id="sql注入是怎么产生的，如何防止？"><a href="#sql注入是怎么产生的，如何防止？" class="headerlink" title="sql注入是怎么产生的，如何防止？"></a>sql注入是怎么产生的，如何防止？</h3><p>sql注入产生原因：因为在程序开发过程中没有对sql语句进行检查或未进行关键字检查， 导致客户端可以提交sql语句到服务器运行。<br>如何防止：<br>1.对sql与进行检查， 过滤。<br>2.不要使用sql拼接的方式来拼接sql语句， 对常用的方法进行封装避免暴露sql语句（使用ORM）。</p><h3 id="xss如何预防？"><a href="#xss如何预防？" class="headerlink" title="xss如何预防？"></a>xss如何预防？</h3><p>对用户输入做严格的防范， ， 在服务端对用户数据进行转义处理。</p><h3 id="csrf是什么？如何防范？"><a href="#csrf是什么？如何防范？" class="headerlink" title="csrf是什么？如何防范？"></a>csrf是什么？如何防范？</h3><p>csrf成为跨站伪造请求， 利用用户信任过的网站去执行一些恶意的操作<br>如何防范：<br>1.检查Referer字段， 严格要求该字段只来自于信任的URL<br>2.添加校验token，将token值附加在表单中，攻击者是无法获取这个字， 服务端进行检查发现该值为空时将会拒绝服务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;进程的有哪几种状态以及导致转换的事件。&quot;&gt;&lt;a href=&quot;#进程的有哪几种状态以及导致转换的事件。&quot; class=&quot;headerlink&quot; title=&quot;进程的有哪几种状态以及导致转换的事件。&quot;&gt;&lt;/a&gt;进程的有哪几种状态以及导致转换的事件。&lt;/h3&gt;&lt;p&gt;进程
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>关于Python工程师的面试题（二）</title>
    <link href="http://yoursite.com/2019/09/21/%E5%85%B3%E4%BA%8EPython%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/09/21/关于Python工程师的面试题（二）/</id>
    <published>2019-09-21T06:43:21.000Z</published>
    <updated>2019-11-01T01:20:29.656Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">此文可能有上一篇文章中重复内容</span><br></pre></td></tr></table></figure><h3 id="args-kwargs是什么意思"><a href="#args-kwargs是什么意思" class="headerlink" title="args, *kwargs是什么意思?"></a><em>args, *</em>kwargs是什么意思?</h3><p>*args: 可变位置参数。<br>*kwargs: 可变关键字参数。</p><h3 id="谈一谈Python中的装饰器"><a href="#谈一谈Python中的装饰器" class="headerlink" title="谈一谈Python中的装饰器"></a>谈一谈Python中的装饰器</h3><p>Python中的装饰器其实也是一种函数， 它可以在不修改原函数代码情况下扩展原函数功能。装饰器函数与普通函数不同之处就在于装饰器函数返回了一个函数对象，装饰器利用了闭包的原理来实现。主要用于日志插入，权限管理等等。</p><h3 id="Python的垃圾回收机制以及内存管理"><a href="#Python的垃圾回收机制以及内存管理" class="headerlink" title="Python的垃圾回收机制以及内存管理"></a>Python的垃圾回收机制以及内存管理</h3><p>垃圾回收机制：<br>Python的垃圾回收机制以引用计数为主， 标记清除、分代回收为辅。引用计数指：Python在内部维护了针对每一个对象的引用计数， 当一个对象创建或者被引用时，其引用计数将加1，当一个对象被销毁或作用域失效时， 其引用计数将减1。只有对象的引用计数为0时，这个对象将会被回收。引用计数的优点：简单、具有实时性。缺点：对象循环引用时将永远不会被销毁。对于对象循环引用的状况Python使用标记清除来解决，Python在内部实现了一个循环检测器， 不停的检测对象是否存在循环引用，如果两个对象互相循环引用并且不包含其他第三者对象时， 其将会被收回。在Python参考手册中有写道：当一个对象无法获取时， 那么这个对象有可能被当成垃圾销毁了。Python将所有对象分成了三代， 对象存活时间越长就越晚被回收， 反之则越早被回收。<br>内存管理：<br>Python使用了内存池机制来管理内存，其内存以金字塔的形式对内存功能进行划分，-1、-2层主要用于对操作系统进行操作， 0层中是C的malloc,、free等等内存分配和释放函数。1、2层是一个内存池， 当对象小于265K时将直接由这片内存池进行分配内存，否则将调用第0层中的C函数来分配内存，当小于265K的对象被销毁时， 其内存也不会被销毁， 只是返回给了内存池以便二次利用。2层是对Python对象进行操作。</p><h3 id="Python多线程"><a href="#Python多线程" class="headerlink" title="Python多线程"></a>Python多线程</h3><p>Python中多线程由于有GIL的影响， 导致在任意时间内只有一个线程在运行，所以Python的多线程在处理计算密集型任务上效果反而不如单线程， 只有在处理IO密集型任务上多线程才能发挥实力，在等待IO过程中Python C源码会释放GIL， 最终会导致线程在等待IO过程中会被暂停去执行其他的线程。python中GIL主要是由于历史原因导致Cpython虚拟机中的GIL难以移除，同时GIL的存在保证了多线程之间数据完整性以及状态同步。</p><h3 id="说明os、sys模块不同，并列举常用的模块方法"><a href="#说明os、sys模块不同，并列举常用的模块方法" class="headerlink" title="说明os、sys模块不同，并列举常用的模块方法"></a>说明os、sys模块不同，并列举常用的模块方法</h3><p>os: 提供了对使用操作系统函数的高度封装<br>sys: 提供由解释器访问或者维护的变量以及与解释器交互的一些函数</p><p>os模块只负责程序与操作系统交互， 提供了访问操作系统底层的接口封装。<br>sys模块负责程序与解释器交互， 提供了一系列的函数用于操控Python运行的环境设置。</p><p>os模块常用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">os.getcwd() # 获取当前运行路径</span><br><span class="line">os.remove() # 删除指定的文件</span><br><span class="line">os.walk() # 生成指定目录下的文件夹以及文件</span><br><span class="line">os.makedirs() # 生成多成目录</span><br><span class="line">os.mkdir() # 生成目录</span><br><span class="line">os.rmdir() # 删除指定目录</span><br><span class="line">os.removedir() # 删除多层目录</span><br><span class="line">os.listdir() # 列出指定目录下所有的文件夹以及文件</span><br><span class="line">os.path.join() # 将分离的各部分组合成一个路径名</span><br><span class="line">os.path.getsize() # 获取指定文件大小</span><br><span class="line">os.path.exists() # 查看指定目录或者文件是否存在</span><br><span class="line">os.path.isabs() # 查看指定目录是否为绝对路径</span><br></pre></td></tr></table></figure><p>sys模块常用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sys.argv # 命令行参数列表</span><br><span class="line">sys.exit() # 退出程序并返回指定的整数</span><br><span class="line">sys.maxunicode # 最大的Unicode值</span><br><span class="line">sys.modules # 系统导入的模块名称</span><br><span class="line">sys.path # python搜索模块时的路径</span><br><span class="line">sys.stdout # 标准输出</span><br><span class="line">sys.stdin # 标准输入</span><br><span class="line">sys.stderr # 错误输出</span><br></pre></td></tr></table></figure><h3 id="什么是lambda表达式？它有什么好处？"><a href="#什么是lambda表达式？它有什么好处？" class="headerlink" title="什么是lambda表达式？它有什么好处？"></a>什么是lambda表达式？它有什么好处？</h3><p>lambda也是函数的一种， 在处理一些简单的操作时可以使用该表达式， 其好处是不用为一些实现简单功能的函数命名，毕竟编程只有两个难点： 缓存失效， 命名。</p><h3 id="Python里面如何拷贝一个对象？"><a href="#Python里面如何拷贝一个对象？" class="headerlink" title="Python里面如何拷贝一个对象？"></a>Python里面如何拷贝一个对象？</h3><p>Python中拷贝分为深拷贝、浅拷贝。浅拷贝只拷贝父级对象， 不会拷贝对象内部的子对象，使用copy模块中的copy。深拷贝则会完全拷贝父对象以及子对象， 使用copy模块中的deepcopy。</p><h3 id="new和init的区别"><a href="#new和init的区别" class="headerlink" title="new和init的区别"></a><strong>new</strong>和<strong>init</strong>的区别</h3><p><strong>new</strong>负责构建一个类对象并将其返回，<strong>init</strong>则负责初始化一些变量，不返回任何对象。在实例化一个类时， <strong>new</strong>方法将会先被运行， 其次才运行<strong>init</strong>方法。</p><h3 id="python中协程？"><a href="#python中协程？" class="headerlink" title="python中协程？"></a>python中协程？</h3><p>Python中协程最初使用yield来实现， 当程序运行到yield语句时就会将控制权交出来去执行其他的函数， 在Python3之前只能通过原生yield、greenlet以及Gevent第三方库来实现协程， 在Python3 之后引入了yield from， yield from 用于重构生成器。在Python3.5之后引用了async和await， 其作为yield from， yield的完美替身来实现协程。</p><h3 id="Python的异常机制"><a href="#Python的异常机制" class="headerlink" title="Python的异常机制?"></a>Python的异常机制?</h3><p>Python中异常也是一个对象， 所有的异常的基类都是Exception。捕获异常使用try…except….语法，如果要try与except之间的代码出现了错误并且我们将其异常类型捕获了那么代码将会跳转代except中去执行。还可以使用raise 去手动的触发一个错误，也可以使用assert来触发异常， 只不过assert经常用来在测试中， 并且assert对程序的性能有着极大影响，只有内置的<strong>debug</strong>为True时assert才会执行。</p><h3 id="python旧式类-经典类-和新式类的区别"><a href="#python旧式类-经典类-和新式类的区别" class="headerlink" title="python旧式类(经典类)和新式类的区别"></a>python旧式类(经典类)和新式类的区别</h3><p>经典类与新式类的区别是：继承搜索的顺序发生了改变，经典类多继承搜索顺序是深度优先， 按照从左至右的查找，并且将每一个父类的基类都查找一遍。新式类则是， 先从左至右的查找， 然后再向每一个父类的基类进行查找。（都是从左至右的顺序查找， 经典类查找一个父类时同时向上查找，新式类则是先查找所有的父类然后再向上查找）</p><h3 id="classmethod，staticmethod，property是什么？有什么作用？"><a href="#classmethod，staticmethod，property是什么？有什么作用？" class="headerlink" title="classmethod，staticmethod，property是什么？有什么作用？"></a>classmethod，staticmethod，property是什么？有什么作用？</h3><p>classmethod，staticmethod，property都是装饰器， 他们都作用在类的方法上。classmethod：使得被装饰的方法成为一个类方法既不需要实例化类就可以直接调用的方法，第一个参数为cls。 staticmethod： 使得被装饰的方法成为一个静态函数既与普通的函数无区别。property: 将一个方法变成一个属性来使用。</p><h3 id="python中的绑定方法和未绑定方法是什么"><a href="#python中的绑定方法和未绑定方法是什么" class="headerlink" title="python中的绑定方法和未绑定方法是什么"></a>python中的绑定方法和未绑定方法是什么</h3><p>绑定方法：绑定了实例化的方法既第一个参数是self<br>未绑定方法：没有绑定实例化的方法既类方法、静态方法</p><h3 id="python上下文管理器是什么？"><a href="#python上下文管理器是什么？" class="headerlink" title="python上下文管理器是什么？"></a>python上下文管理器是什么？</h3><p>Python中上下文管理器使用with来调用主要用于数据库连接，文件操作， 网络操作。其作用是： 如果在进行一些打开资源操作时出现了异常，上下文管理器将会自动的执行一些资源清理操作。在进入上下文管理器时， Python会先调用对象的<strong>enter</strong>方法， 该方法返回一个对象用于进行一些操作，如果在进行一些操作时发生了异常Python则调用<strong>exit</strong>该对象接受三个参数第一个参数异常类，第二个参数异常提示字符串， 第三个参数traceback对象。</p><h3 id="functools的wraps是做什么的？"><a href="#functools的wraps是做什么的？" class="headerlink" title="functools的wraps是做什么的？"></a>functools的wraps是做什么的？</h3><p>wraps是一个装饰器功能是： 由于被装饰的函数传入到装饰器中时已经不是原函数了， 而是一个新的函数， 并且丢失一些原函数的属性， 为了不影响函数的使用， 可以使用wraps来抵消这种副作用。</p><h3 id="请说一说ORM实现原理"><a href="#请说一说ORM实现原理" class="headerlink" title="请说一说ORM实现原理"></a>请说一说ORM实现原理</h3><p>ORM使用了Python的属性描述符协议实现，通过另外一个类来描述类变量的属性类型， 再给这个属性进行赋值时（对应数据库中的字段名称）会调用<strong>set</strong>方法，访问属性则会调用<strong>get</strong>方法删除则调用<strong>delete</strong>方法。</p><h3 id="请说一说迭代器和生成器区别"><a href="#请说一说迭代器和生成器区别" class="headerlink" title="请说一说迭代器和生成器区别?"></a>请说一说迭代器和生成器区别?</h3><p>生成器时一种特殊的迭代器， 生成器自动实现了迭代器协议， 不需要手动的实现<strong>iter</strong>以及next方法，生成器在迭代的过程中可以改变当前的迭代值， 而普通的迭代器改变当前值时往往会发生错。迭代器必须实现<strong>iter</strong>以及next方法。</p><h3 id="描述一下type-的作用"><a href="#描述一下type-的作用" class="headerlink" title="描述一下type()的作用"></a>描述一下type()的作用</h3><p>当type只传入一个参数时将返回该参数的类型，如果传入了三个参数则返回一个类对象，同时Python中的所有类的基类都是type</p><h3 id="Python中列表与元组的异同？"><a href="#Python中列表与元组的异同？" class="headerlink" title="Python中列表与元组的异同？"></a>Python中列表与元组的异同？</h3><p>相同： 列表和元组都是容器并且是可迭代对象，二者可以包含任意类型的对象。<br>不同：列表是可变的， 元组是不可变。</p><h3 id="Python中的列表是如何实现的？"><a href="#Python中的列表是如何实现的？" class="headerlink" title="Python中的列表是如何实现的？"></a>Python中的列表是如何实现的？</h3><p>Python中的列表使用了分离式技术实现的动态顺序表。</p><h3 id="Python中列表的索引查询的时间复杂度是多少？"><a href="#Python中列表的索引查询的时间复杂度是多少？" class="headerlink" title="Python中列表的索引查询的时间复杂度是多少？"></a>Python中列表的索引查询的时间复杂度是多少？</h3><p>O(1)</p><h3 id="Python字典的实现原理？"><a href="#Python字典的实现原理？" class="headerlink" title="Python字典的实现原理？"></a>Python字典的实现原理？</h3><p>Python的字典使用了哈希表来储存key、value,当添加一个数据时首先会把key通过哈希函数转换成一个数字， 然后将该数字对存放value的数组长度取余并将取余结果当做数组的下标， 将value存放在该取余结果为下标的数组中。数据查询时将key转换为对应的数组下标，并定位到数组的位置获取value。</p><h3 id="什么是pickling和unpickling？"><a href="#什么是pickling和unpickling？" class="headerlink" title="什么是pickling和unpickling？"></a>什么是pickling和unpickling？</h3><p>Pickle模块读入任何Python对象，将它们转换成字符串，然后使用dump函数将其转储到一个文件中——这个过程叫做pickling，反之从存储的字符串文件中提取原始Python对象的过程，叫做unpickling。</p><h3 id="有哪些工具可以帮助debug或做静态分析？"><a href="#有哪些工具可以帮助debug或做静态分析？" class="headerlink" title="有哪些工具可以帮助debug或做静态分析？"></a>有哪些工具可以帮助debug或做静态分析？</h3><p>PyChecker是一个静态分析工具，它不仅能报告源代码中的错误，并且会报告错误类型和复杂度。<br>Pylint是检验模块是否达到代码标准的另一个工具。<br>dis用来查看Python对象的字节码。</p><h3 id="Python中的作用域？"><a href="#Python中的作用域？" class="headerlink" title="Python中的作用域？"></a>Python中的作用域？</h3><p>在Python中，一个对象的作用于总是由代码被赋值的地方所决定的。当遇见一个变量时Python会按照： 本地作用域→ 当前作用域被嵌入的本地作用域→ 全局/模块作用域→ 内置作用域顺序搜索。</p><h3 id="Python的参数传递是值传递还是引用传递？"><a href="#Python的参数传递是值传递还是引用传递？" class="headerlink" title="Python的参数传递是值传递还是引用传递？"></a>Python的参数传递是值传递还是引用传递？</h3><p>可变对象使用引用传递， 不可变对象使用值传递</p><h3 id="写一个函数-输入一个字符串-返回倒序排列的结果"><a href="#写一个函数-输入一个字符串-返回倒序排列的结果" class="headerlink" title="写一个函数, 输入一个字符串, 返回倒序排列的结果"></a>写一个函数, 输入一个字符串, 返回倒序排列的结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def reverse(text):</span><br><span class="line">    return text[::-1]</span><br></pre></td></tr></table></figure><h3 id="python中is和-的区别"><a href="#python中is和-的区别" class="headerlink" title="python中is和==的区别"></a>python中is和==的区别</h3><p>is比较的是对象在内存的地址， ==比较的对象中的值</p><h3 id="什么是Python的闭包？"><a href="#什么是Python的闭包？" class="headerlink" title="什么是Python的闭包？"></a>什么是Python的闭包？</h3><p>内层函数引用了其外部作用域的变量，然后返回内层函数的情况，称为闭包，创建一个闭包必须满足以下几点:</p><ol><li>必须有一个内嵌函数</li><li>内嵌函数必须引用外部函数中的变量，外层空间中被引用的变量叫做层函数的环境变量</li><li>外部函数的返回值必须是内嵌函数</li><li>环境变量和内层非全局函数一起构成了闭包</li></ol><h3 id="Python的自省"><a href="#Python的自省" class="headerlink" title="Python的自省?"></a>Python的自省?</h3><p>type()，dir()，getattr()，hasattr()，isinstance()</p><h3 id="Python并发的解决方案"><a href="#Python并发的解决方案" class="headerlink" title="Python并发的解决方案"></a>Python并发的解决方案</h3><p>Twisted是一个事件驱动型的网络引擎，不同于单线程和多线程模式，这种模式不需要过多去关心线程锁的问题，当遇到高并发问题时候，采用twisted会很好解决数据共享的问题。Tornado既是一个web server，也是web framework。就是说这个web框架有自己内置的web server，在写web时候可以用到它的高性能网络库，甚至有公司拿这个来做游戏的服务器，可以用它处理高并发问题。Gevent是基于协程的Python网络库，基于libev的快速事件循环，基于greenlet的轻量级执行单元，API的概念和Python标准库一致。sanic基于uvloop和httptools实现高并发异步网络框架</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>关于Python工程师的面试题（一）</title>
    <link href="http://yoursite.com/2019/09/20/%E5%85%B3%E4%BA%8EPython%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/09/20/关于Python工程师的面试题（一）/</id>
    <published>2019-09-20T08:47:50.000Z</published>
    <updated>2019-09-21T06:43:47.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何提高python的运行效率？"><a href="#如何提高python的运行效率？" class="headerlink" title="如何提高python的运行效率？"></a>如何提高python的运行效率？</h2><p>答：<br>使用生成器；关键代码使用外部功能，针对循环的优化-尽量避免在循环中访问变量的属性。</p><h2 id="什么是生成器？"><a href="#什么是生成器？" class="headerlink" title="什么是生成器？"></a>什么是生成器？</h2><p>答：<br>我们创建列表的时候，受到内存限制，容量肯定是有限的，而且不可能全部给他一次枚举出来。这里可以使用列表生成式，但是它有一个致命的缺点就是定义即生成，非常的浪费空间和效率。</p><p>所以，如果列表元素可以按照某种算法推算出来，那我们可以在循环的过程中不断推算出后续的元素,这样就不必创建完整的list，从而节省大量的空间。<strong>在Python中，这种一边循环一边计算的机制，称为生成器：generator</strong>。</p><p>要创建一个 generator ，最简单的方法是改造列表生成式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x*x for x in range(10)] # 列表推导式 --&gt; (x * x for x in range(10)) # 生成器</span><br></pre></td></tr></table></figure><h2 id="什么是可迭代对象？"><a href="#什么是可迭代对象？" class="headerlink" title="什么是可迭代对象？"></a>什么是可迭代对象？</h2><p>答：<br>简单的来理解就是可以使用for循环遍历的对象。比如常见的list、set和dict。<br>可以使用测试对象是否是可迭代：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from collections import Iterable</span><br><span class="line">isinstance(对象，Iterable)</span><br></pre></td></tr></table></figure><h2 id="什么是迭代器？"><a href="#什么是迭代器？" class="headerlink" title="什么是迭代器？"></a>什么是迭代器？</h2><p>答：<br>迭代器是一个可以记住遍历的位置的对象。</p><p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p><p>迭代器有两个基本的方法：iter() 和 next()。</p><h2 id="什么是装饰器？"><a href="#什么是装饰器？" class="headerlink" title="什么是装饰器？"></a>什么是装饰器？</h2><p>答：<br>装饰器（Decorator）是python中最吸引人的特性，装饰器本质上还是一个函数，它可以让已有的函数不做任何改动的情况下增加功能。</p><h2 id="生成器、迭代器和可迭代对象的区别和应用？"><a href="#生成器、迭代器和可迭代对象的区别和应用？" class="headerlink" title="生成器、迭代器和可迭代对象的区别和应用？"></a>生成器、迭代器和可迭代对象的区别和应用？</h2><p>答：<br>能使用for循环遍历的叫可迭代对象，能使用next方法的就是迭代器，生成器是特殊的迭代器。</p><h2 id="python中yield的用法？"><a href="#python中yield的用法？" class="headerlink" title="python中yield的用法？"></a>python中yield的用法？</h2><p>答：<br>yield简单来说是一个生成器，这样函数记住上次返回时在函数中的位置，对于生成器第二次或n次调用跳转至该函数。</p><h2 id="python中如何进行内存管理的？"><a href="#python中如何进行内存管理的？" class="headerlink" title="python中如何进行内存管理的？"></a>python中如何进行内存管理的？</h2><p>答：<br>垃圾回收、内存池机制</p><h2 id="描述数组，链表，队列，堆栈的区别？"><a href="#描述数组，链表，队列，堆栈的区别？" class="headerlink" title="描述数组，链表，队列，堆栈的区别？"></a>描述数组，链表，队列，堆栈的区别？</h2><p>答：<br>数组和链表时存储方式的概念，数组在连续的空间中存储数据，链表在非连续的空间中存储数据<br>队列和堆栈时描述数据存取的方法概念，队列是先进先出，而堆栈是后进后出，队列和堆栈可以用链表来实现，也可以用数组来实现。</p><h2 id="如何实现0-100的和？"><a href="#如何实现0-100的和？" class="headerlink" title="如何实现0-100的和？"></a>如何实现0-100的和？</h2><p>答：<br>sum(range(0,101))</p><h2 id="请说几个python的标准库"><a href="#请说几个python的标准库" class="headerlink" title="请说几个python的标准库"></a>请说几个python的标准库</h2><p>答：<br>os：操作系统相关联的函数<br>datetime：日期时间<br>sys：命令行参数<br>re：正则匹配<br>math：数学运算</p><h2 id="字典如何删除键和合并两个字典的？"><a href="#字典如何删除键和合并两个字典的？" class="headerlink" title="字典如何删除键和合并两个字典的？"></a>字典如何删除键和合并两个字典的？</h2><p>答：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict_first = &#123;&apos;name&apos;: &apos;wangwu&apos;, &apos;age&apos;: 20&#125;</span><br><span class="line">del.dict_first[&apos;name&apos;] # 删除键</span><br><span class="line">dict_second[&apos;gender&apos;: &apos;female&apos;&#125;</span><br><span class="line">dict_first.update(dict_second) # 字典合并</span><br></pre></td></tr></table></figure><h2 id="谈一谈python中的GIL"><a href="#谈一谈python中的GIL" class="headerlink" title="谈一谈python中的GIL"></a>谈一谈python中的GIL</h2><p>答：<br>GIL是python中的全局解释其所。<br>每个线程在执行的过程都需要先获取GIL，保证同一时刻只有一个线程可以执行代码。<br>1、什么时候释放GIL锁？<br>答：<br>① 时间片耗尽（cpu时间）<br>② 任务遇到I/O等待<br>③ 任务结束后</p><h2 id="GIL和互斥锁的区别"><a href="#GIL和互斥锁的区别" class="headerlink" title="GIL和互斥锁的区别"></a>GIL和互斥锁的区别</h2><p>答：<br>GIL是全局解释器锁，是解释器层面的，不可控的。<br>互斥锁是代码层面的锁，是可控的<br>GIL和互斥锁都是解决共享资源竞争的问题</p><h2 id="python中的可变类型与不可变类型"><a href="#python中的可变类型与不可变类型" class="headerlink" title="python中的可变类型与不可变类型"></a>python中的可变类型与不可变类型</h2><p>答：<br>可变类型：在原来的内存地址上修改元素，比如：列表字典<br>不可变类型：不会在原来的内存地址上修改元素，而是指向了一个新的内存引用，比如整型、字符串、元组</p><h2 id="break和continue的区别"><a href="#break和continue的区别" class="headerlink" title="break和continue的区别"></a>break和continue的区别</h2><p>答：<br>continue是跳过本次循环，继续执行下一次循环<br>break是结束整个循环</p><h2 id="对不定长参数的理解？"><a href="#对不定长参数的理解？" class="headerlink" title="对不定长参数的理解？"></a>对不定长参数的理解？</h2><p>答：<br><em>args：可以接收任意多个实参，用元组类型保存数据。<br>*</em>kwargs：可以接收任意多个的命名参数，用子弹类型保存</p><h2 id="对缺省参数的理解？"><a href="#对缺省参数的理解？" class="headerlink" title="对缺省参数的理解？"></a>对缺省参数的理解？</h2><p>答：<br>在调用函数时，缺省参数的值如果没有传入，则被认为是默认值，缺省参数一定要位于参数列表的最后面。</p><h2 id="什么是lambda函数？"><a href="#什么是lambda函数？" class="headerlink" title="什么是lambda函数？"></a>什么是lambda函数？</h2><p>答：<br>Lambda函数能接收任何数量的参数但只能返回一个表达式的值<br>匿名函数不能直接调用print，因此lambda需要一个表达式</p><h2 id="read、readline和readlines的区别"><a href="#read、readline和readlines的区别" class="headerlink" title="read、readline和readlines的区别"></a>read、readline和readlines的区别</h2><p>答：<br>read()：读取整个文件<br>read(num)：读取文件中的数据长度，单位为字节<br>readline()：读取一行<br>readlines()：读取所有内容并返回一个列表</p><h2 id="上下文管理器了解吗？"><a href="#上下文管理器了解吗？" class="headerlink" title="上下文管理器了解吗？"></a>上下文管理器了解吗？</h2><p>答：<br>with有两个方法，一个是enter，它主要负责上下文的准备工作，一般是打开文件，准备环境；另一个是exit主要负责善后工作，比如关闭文件，一些回收机制。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何提高python的运行效率？&quot;&gt;&lt;a href=&quot;#如何提高python的运行效率？&quot; class=&quot;headerlink&quot; title=&quot;如何提高python的运行效率？&quot;&gt;&lt;/a&gt;如何提高python的运行效率？&lt;/h2&gt;&lt;p&gt;答：&lt;br&gt;使用生成器；关键
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>初识Python</title>
    <link href="http://yoursite.com/2019/08/01/%E5%88%9D%E8%AF%86Python/"/>
    <id>http://yoursite.com/2019/08/01/初识Python/</id>
    <published>2019-08-01T14:10:00.000Z</published>
    <updated>2019-11-01T03:29:01.620Z</updated>
    
    <content type="html"><![CDATA[<pre><code>人生苦短，我用Python——Life is short， You need PythonPython的创始人为吉多·范罗苏姆(Guido van Rossum)Python的设计哲学是“优雅”、“明确”、“简单”。</code></pre><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul><li>Python是完全面向对象的语言<ul><li>函数、模块、数字、字符串都是对象，在Python中一切皆为对象</li><li>完全支持继承、重载、多重继承</li><li>支持重载运算符，也支持泛型设计</li></ul></li><li>Python拥有一个强大的标准库，Python语言的核心只包含数字、字符串、列表、字典、文件等常见类型和函数，而由Python标准库提供了系统管理、网络通信、文本处理、数据库接口、图形系统、XML处理等额外的功能。</li><li>Python社区提供了大量的第三方模块，使用方式与标准库类似。他们的功能覆盖人工智能、科学计算、机器学习等多个领域。</li></ul><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ul><li>简单</li><li>易学</li><li>速度快</li><li>免费、开源</li><li>可移植性</li><li>可扩展性</li><li>可嵌入性</li><li>面向对象</li><li>丰富的库</li><li>规范的代码</li><li>解释性</li><li>高层语言</li></ul><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><ul><li><p>运行速度慢,Python是解释型语言,运行时需要一行行转换成CPU理解的机器码,费时</p></li><li><p>代码不能加密</p></li><li><p>GIL锁限制并发</p></li><li><p>py2与py3不兼容</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;人生苦短，我用Python——Life is short， You need Python
Python的创始人为吉多·范罗苏姆(Guido van Rossum)
Python的设计哲学是“优雅”、“明确”、“简单”。&lt;/code&gt;&lt;/pre&gt;&lt;h5 id
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>性能测试</title>
    <link href="http://yoursite.com/2019/05/31/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2019/05/31/性能测试/</id>
    <published>2019-05-31T10:46:00.000Z</published>
    <updated>2019-10-31T13:27:01.661Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>一款优秀的软件不仅要具备良好的功能，还要有过硬的性能。性能测试需要基于功能测试，性能测试主要包含两个特性：时间和资源。时间指系统处理客户请求的时间，主要用响应时间和吞吐量来衡量，而资源则是指软件运行过程中系统资源消耗的情况，最尝受关注的资源包括CPU、内存、磁盘。</p><p>以在营业厅办业务为例，如果人比较少，你可能不需要排队，立马就可以办理业务，大概要5分钟就完成。如果是人比较多，前面有几个人在排队，你大概需要30分钟才办理完业务</p><pre><code>响应时间：上面的5分钟，30分钟就是响应时间。从你到达营业厅到你办理业务完成的时间，这个时间越短，性能越好 吞吐量：单位时间内办理完成的业务数，办理业务越快，吞吐量越大。即一定时间内处理的客户端请求数</code></pre><h6 id="为什么做性能测试？"><a href="#为什么做性能测试？" class="headerlink" title="为什么做性能测试？"></a>为什么做性能测试？</h6><ul><li>例如网站报错：当前访问用户过多，请稍后重试，给用户带来不好的体验，如果做性能测试的话：我们可以通过工具模拟大量用户访问，验证系统是否能够支撑预期用户量，如果不能的话，提前进行性能优化</li><li>例如网站报错：502 Bad Gateway， 系统存在性能缺陷，导致系统瘫痪，做性能测试可以识别性能缺陷，规避性能风险</li><li>系统短时间内正常，运行半年后出现错误，说明系统在长时间运行下出错，存在稳定性缺陷做性能测试可以检验产品的稳定性，保障产品长时间无故障运行。</li></ul><p>性能测试方法主要包括：性能测试、配置测试、并发测试、负载测试、压力测试、稳定性测试。</p><ul><li>性能测试：测试环境和测试目标确定的情况下，测试系统是否达到宣称的能力。</li><li>配置测试：系统具有一定的测试基础时，通过修改环境配置，例如服务器参数等，对比之前的测试结果进行优化。</li><li>并发测试：模拟多个用户并发使用系统，测试系统是否存在死锁、内存泄漏等问题。</li><li>负载测试：逐渐向系统添加压力，观察系统资源消耗情况，直到某一项资源达到极限。一般用于度量系统的性能容量，寻找系统瓶颈为系统调优提供数据。</li><li>压力测试：系统承受一定压力的情况下，测试系统是否会出现错误。系统压力包括CPU、内存、磁盘、网络等方面的压力，施加压力的方法包括利用工具占用系统资源、增加并发量等。</li><li>稳定性测试：系统承受一定压力的情况下，运行一段时间，测试系统是否能够平稳运行。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;一款优秀的软件不仅要具备良好的功能，还要有过硬的性能。性能测试需要基于功能测试，性能测试主要包含两个特性：时间和资源。时间指系统处理客户请求
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Test" scheme="http://yoursite.com/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>功能测试</title>
    <link href="http://yoursite.com/2019/05/30/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2019/05/30/功能测试/</id>
    <published>2019-05-30T13:27:00.000Z</published>
    <updated>2019-11-01T08:13:32.266Z</updated>
    
    <content type="html"><![CDATA[<h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>功能测试也叫黑盒测试，只需要考虑测试的各个功能，不需要考虑整个软件的内部结构及代码，一般从软件产品界面、架构出发，按照需求编写出来的测试用例，输入数据在预期结果和实际结果之间进行评测，进而提出更加使产品达到用户使用的要求。</p><h5 id="基本功能验证"><a href="#基本功能验证" class="headerlink" title="基本功能验证"></a>基本功能验证</h5><p>验证每个功能是否可用，在每个界面，从上往下，从左往右依次测试每个功能。</p><h5 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h5><ul><li>等价类划分</li><li>边界值分析</li><li>错误推测</li><li>因果图</li><li>判定表驱动分析</li><li>正交实验</li><li>功能图分析</li></ul><h5 id="常见功能测试点"><a href="#常见功能测试点" class="headerlink" title="常见功能测试点"></a>常见功能测试点</h5><h6 id="一、登录"><a href="#一、登录" class="headerlink" title="一、登录"></a>一、登录</h6><p>1、空值</p><p>用户名和密码均为空，用户名填写，密码为空/用户名为空，密码填写</p><p>2、错误校验</p><p>输入错误的用户名和密码/用户名错误密码正确/用户名正确密码错误</p><p>3、大小写区分</p><p>用户名和密码均大写/用户名大写，密码小写/用户名小写，密码大写</p><p>4、空格</p><p>合法的用户名或密码前/中/后依次插入空格</p><p>5、已注销的用户名登录</p><p>6、已禁止、锁定的用户</p><p>7、长短校验</p><p>8、非法字符校验</p><p>9、多次（3次/5次）错误登录，是否锁住</p><p>10、是否支持TAB和Enter</p><p>11、多点登录/提示信息（同一用户不能在同一时间不同位置登录）</p><p>12、登录是否记住用户名和密码</p><p>13、密码明文</p><p>14、切换用户，是否显示前一用户信息</p><p>15、登录后前进后退操作</p><p>16、查看密码转码是否有规律，是否每次一样</p><p>17、密码是否可以用MD5解密</p><p>18、登录超时（经过一段时间登录自动退出）</p><p>19、SQL注入问题</p><p>20、跨站</p><p>21、Cookie注入</p><p>22、Cookie加密检查</p><p>23、提交用get方法（不安全）</p><h6 id="二、基本功能测试"><a href="#二、基本功能测试" class="headerlink" title="二、基本功能测试"></a>二、基本功能测试</h6><p>1、输入正确的用户名和密码登录成功</p><p>2、输入错误的用户名和密码登录失败</p><p>3、用户名正确，密码错误是否提示密码错误</p><p>4、用户名错误，密码正常是否提示用户名错误</p><p>5、用户名和密码都错误是否有相应提示</p><p>6、用户名密码为空是否有相应提示</p><p>7、用户未注册是否提示先注册再登录</p><p>8、已注销的用户登录失败是否提示信息友好</p><p>9、密码框是否加密显示</p><p>10、用户名是否支持中文、特殊字符，是否有长度限制</p><p>11、密码是否支持中文、特殊字符，是否有长度限制</p><p>12、用户名是否区分大小写</p><p>13、密码是否区分大小写</p><p>14、密码为一些简单的字符串时是否提示密码过于简单</p><p>15、密码存储方式，是否加密</p><p>16、登录功能是否需要验证码（验证码有效时间）/移动滑块</p><p>17、验证码/移动滑块错误，提示信息是否友好</p><p>18、验证码/移动滑块换一张是否更换，功能是否可用</p><p>19、用户体系：比如普通用户、高级用户登录后的权限是否不同</p><p>20、使用第三方登录，那么第三方账号与本系统账号体系对应关系如何保存</p><h6 id="二、页面测试"><a href="#二、页面测试" class="headerlink" title="二、页面测试"></a>二、页面测试</h6><p>1、登录页面是否显示正常,文字和图片显示是否正常，相应提示信息显示是否正确，按钮的位置和排列显示是否正常，页面是否简洁大气等。</p><p>2、默认焦点是否定位在用户名输入框内</p><p>3、首次打开页面时输入框内是否为空，如果由默认值，点击输入框时默认值是否消失</p><p>4、页面中相应的按钮是否功能正常（如：登录、前进、后退等）</p><p>5、TAB、ESC、ENTER等快捷键是否能使用</p><p>6、不同的操作系统、浏览器和不同的分辨率界面显示是否正常</p><p>三、安全测试</p><p>1、不登陆的情况下在浏览器中直接输入登录后的地址，看是否可以直接进入</p><p>2、登录成功后生成的Cookie是否是httponly</p><pre><code>如果Cookie中设置了HttpOnly属性，JS脚本就无法读取到Cookie信息，能有效的防止XSS攻击，增加Cookie的安全性，即便是这样也不要将重要信息存储到Cookie。XSS全称Cross SiteScript，跨脚本攻击。其原理是攻击者向由XSS漏洞的网站传入恶意的HTML代码，当其他用户浏览该网站是，这段代码会自动执行，盗取用户Cookie、破坏页面结构、重定向到其他网站。</code></pre><p>3、用户名是否通过加密的方式发送给Web服务器</p><p>4、用户名和密码的验证应该是用服务器端验证，而不能单单是在客户端使用JS验证</p><p>5、用户名和密码的输入框是否屏蔽SQL注入攻击</p><p>6、用户名和密码的输入框是否禁止输入脚本（防止XSS）攻击</p><p>7、错误登录的次数限制（防止暴力破解）</p><p>8、考虑是否支持多用户在同一台计价器上登录</p><p>9、考虑一用是否在多台机器上登录</p><h6 id="四、性能测试"><a href="#四、性能测试" class="headerlink" title="四、性能测试"></a>四、性能测试</h6><p>1、单用户登录系统的响应时间是否符合3、5、8原则</p><pre><code>网站响应时间3、5、8原则，小于3秒是优，3-5是良，超过8秒用户容易跳失</code></pre><p>2、用户数在临界点时并发登录是否还能符合3、5、8原则</p><p>3、压力：大量并发用户登录，系统的响应时间，系统是否会出现宕机、内存泄漏、CPU饱和、无法登录的情况</p><p>4、稳定性：系统能否处理并发用户数在临界点以内连续登录N个时的场景</p><h6 id="五、其他测试"><a href="#五、其他测试" class="headerlink" title="五、其他测试"></a>五、其他测试</h6><p>1、连续输入3次以上错误密码是否被锁定相应的时间，超出时间是否可以继续登录</p><p>2、用户Session过期后，重新登录是否还能返回之前的Session过期页面</p><p>3、用户名和密码输入框是否支持键盘快捷键（复制、粘贴、撤销等）</p><p>4、是否允许同名用户同时登录进行操作（web和app同时）</p><p>5、手机登录时，是否先判断网络问题</p><p>6、手机登录时，是否先判断有无新版本</p><p>7、是否支持单点登录</p><p>8、是否有埋点接口</p><h5 id="Web测试"><a href="#Web测试" class="headerlink" title="Web测试"></a>Web测试</h5><h6 id="一、输入框："><a href="#一、输入框：" class="headerlink" title="一、输入框："></a>一、输入框：</h6><ul><li>正常的字母/数字/文字</li><li>重复提交（输入内容后，重复点击提交按钮）</li><li>纯异常字符/正常输入夹杂异常字符（“）（*&amp;……%￥#@！”）</li><li>边界值测试，假设最小长度为N,最大长度为M，则测试N-1，N，M，M+1</li><li>已存在记录，重复输入</li><li>什么都不输入直接提交，程序如何处理</li><li>含有空格（开头，中间，结尾）</li><li>输入内容中含有回车，程序如何处理、保存、显示</li><li>复制粘贴操作，二次密码确认时不可生效，其余情况应生效</li><li>如有格式要求，请验证格式</li><li>输入非法字符集，如：\n、null</li><li>全/半角符号是否区分</li><li>输入框若输入空格或*是否能搜索出全部内容，输入比要搜索内容超长的字符能否搜出相应的内容</li></ul><h6 id="二、提交-确定按钮"><a href="#二、提交-确定按钮" class="headerlink" title="二、提交/确定按钮"></a>二、提交/确定按钮</h6><ul><li>对于提交/确定按钮，点击后，数据是否成功处理，页面跳转是否正确</li><li>连续点击提交/确认按钮页面处理如何，注意连续提交时操作要快，达到多个提交尚未处理完成，点击下一个提交，程序如何处理，是否报错</li><li>对于取消按钮，点击取消后，查看数据有没有提交</li></ul><h6 id="三、后退按钮，返回键"><a href="#三、后退按钮，返回键" class="headerlink" title="三、后退按钮，返回键"></a>三、后退按钮，返回键</h6><ul><li>对于页面的操作，要注意测试浏览器上的后退按钮，查看操作完成后之前的操作是否会撤销</li><li>连续点击后退按钮，查看页面会如何处理，是否会报错</li><li>比如已经退出登录的页面，点击后退按钮，页面是否仍是登录状态</li><li>对于有返回键的页面，对于已经成功提交的记录，点击返回键后，如何处理之前的操作</li><li>对于有连续返回键的页面，连续点击返回键，页面如何处理是否报错<h6 id="四、链接测试"><a href="#四、链接测试" class="headerlink" title="四、链接测试"></a>四、链接测试</h6></li><li>测试链接是否按指示的那样确实链接到了该链接的页面</li><li>测试链接的页面是否存在</li><li>保证Web应用系统上没有孤立的页面，所谓孤立页面指没有链接指向该页面，只有知道正确的URL地址才能访问</li><li>未登录/登录时各个页面的跳转都需要点击测试</li></ul><h6 id="五、Session超时-失效"><a href="#五、Session超时-失效" class="headerlink" title="五、Session超时/失效"></a>五、Session超时/失效</h6><ul><li>登录后长时间不操作，Session超时，查看页面跳转</li><li>涉及所有需要登录的才能操作的页面</li><li>登录网站，将需要测试的页面在另一个标签中打开，然后再在原来的页面中退出登录，此时Session已经失效，这样再去操作，即可达到Session失效或超时的条件</li></ul><h6 id="六、图形界面测试"><a href="#六、图形界面测试" class="headerlink" title="六、图形界面测试"></a>六、图形界面测试</h6><ul><li>首先要确保图形有明确的用途</li><li>网站的图片尺寸要尽量的小，并且要能清楚地说明某件事情，一般都链接到某个具体的页面</li><li>其次验证所有页面字体的风格是否一致，验证背景颜色应该与字体颜色和前景颜色相搭配</li></ul><h6 id="七、操作流程"><a href="#七、操作流程" class="headerlink" title="七、操作流程"></a>七、操作流程</h6><ul><li>验证操作流程是否符合大部分用户的操作习惯</li><li>避免多余的操作流程</li><li>操作流程是否流畅，会不会产生让用户误解的步骤</li><li>每个操作完成后，需要给出的提示是否明确给出</li></ul><h6 id="八、列表及翻页功能测试"><a href="#八、列表及翻页功能测试" class="headerlink" title="八、列表及翻页功能测试"></a>八、列表及翻页功能测试</h6><ul><li>对于页面中的各项列表，都要测试其翻页功能，不仅要注意测试各个翻页相关按钮（注意：TAB、ENTER按键测试），特别是页头、页尾</li><li>测试该列表中页数超过5页、10页甚至多页的情况，同时要验证5页以后、10页以后或更多页以后是否正常显示</li></ul><h6 id="九、页面提示语"><a href="#九、页面提示语" class="headerlink" title="九、页面提示语"></a>九、页面提示语</h6><ul><li>页面提示语是否友好，是否符合整个网站的风格</li><li>最好统一整理出文档</li></ul><h6 id="十、浏览器兼容性"><a href="#十、浏览器兼容性" class="headerlink" title="十、浏览器兼容性"></a>十、浏览器兼容性</h6><ul><li>比较主流的浏览器IE6、IE7、IE8以及FireFox，Safari、Chrome</li></ul><h6 id="十一、是否支持TAB、ENTER键"><a href="#十一、是否支持TAB、ENTER键" class="headerlink" title="十一、是否支持TAB、ENTER键"></a>十一、是否支持TAB、ENTER键</h6><ul><li>测试是否支持TAB、ENTER键，这两个键是用户的习惯性操作</li></ul><h6 id="十二、刷新按钮测试"><a href="#十二、刷新按钮测试" class="headerlink" title="十二、刷新按钮测试"></a>十二、刷新按钮测试</h6><ul><li>点击刷新按钮后页面是否刷新并显示正常，是否有异常</li></ul><h6 id="十三、滚动条测试"><a href="#十三、滚动条测试" class="headerlink" title="十三、滚动条测试"></a>十三、滚动条测试</h6><ul><li>拉动滚动条是否有异常</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h5&gt;&lt;p&gt;功能测试也叫黑盒测试，只需要考虑测试的各个功能，不需要考虑整个软件的内部结构及代码，一般从软件产品界面、架构出发，按照需求编写出来的测试用例
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Test" scheme="http://yoursite.com/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>adb的定义及主要功能</title>
    <link href="http://yoursite.com/2019/05/29/adb%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2019/05/29/adb的定义及主要功能/</id>
    <published>2019-05-29T06:06:00.000Z</published>
    <updated>2019-10-31T14:27:54.960Z</updated>
    
    <content type="html"><![CDATA[<p>adb(Android Debug Bridge)是Android SDK 里的一个工具，用这个工具可以直接操作管理Android模拟器或者真实的Andriod设备（如G1手机）。它的主要功能有：</p><ul><li>运行设备的shell命令</li><li>管理模拟器或设备的端口映射</li><li>计算机呵设备之间上传/下载文件</li><li>将本地apk软件安装至模拟器或Android设备</li></ul><p>常用的adb命令有：</p><ol><li><p>查看设备 adb devices</p><p> 这个命令是查看当前连接的设备，连接到计算机的Android设备或者模拟器将会列出显示</p></li><li><p>安装软件 adb install + 安装包路径</p><p> 这个命令将指定的apk文件安装到设备上</p></li><li><p>卸载软件 adb uninstall 文件名<br>adb uninstall -k 软件名</p><p> 如果加-k参数，为卸载软件但是保留配置和缓存文件</p></li><li><p>进入设备或模拟器的shell： adb shell</p></li><li><p>从电脑上发送文件到设备 adb push 本地路径 远程路径</p><p> 用push命令可以把本机电脑上的文件或者文件夹复制到设备（手机）</p></li><li><p>从设备上下载文件到电脑 adb pull 远程路径 本地路径</p><p> 用pull命令可以把设备（手机）上的文件或者文件夹复制到本机电脑</p></li><li><p>在命令行中查看LOG信息： adb logcat</p><p> -s 标签名：查看此标签的日志</p><p> -f 文件名：将日志输出至某文件中</p><p> -v time：显示时间</p><p> -c：情况日志</p><p> 查看E级别以上的日志：*：E</p></li><li><p>monkey命令工具：向程序发送随机事件流，测试程序的稳定性和健壮性</p><p> adb shell monkey -p package 名 -s seed 值 –throttle 毫秒（间隔时间） –ignore-crashes –ignore-timeouts –pct-touch 50 –pct-motion 50 -v 200</p></li><li><p>获取设备的ID和序列号：</p><p>  adb get-product —-</p><p> adb get-serialno — 获取设备的序列号</p><p> adb get-state — 模拟器/设备的当前状态</p></li><li><p>查看CPU硬件的相关信息</p><p>adb shell cat /proc/cpuinfo</p></li><li><p>查看内存的相关信息</p><p>adb shell cat /proc/meminfo</p></li><li><p>查看I/O内存分区的相关信息</p><p>adb shell cat /proc/iomem</p></li><li><p>获取手机型号</p><p>adb shell cat /system/bulid.prop | findstr “ro.product.model”</p></li><li><p>获取电池电量的相关信息</p><p>adb shell dumpsys battery</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;adb(Android Debug Bridge)是Android SDK 里的一个工具，用这个工具可以直接操作管理Android模拟器或者真实的Andriod设备（如G1手机）。它的主要功能有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行设备的shell命令&lt;/li&gt;
&lt;li&gt;管理模
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Test" scheme="http://yoursite.com/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>Subversion(SVN)配置管理工具</title>
    <link href="http://yoursite.com/2019/05/27/Subversion-SVN-%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2019/05/27/Subversion-SVN-配置管理工具/</id>
    <published>2019-05-27T11:13:00.000Z</published>
    <updated>2019-10-27T12:30:20.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SVN-简介"><a href="#SVN-简介" class="headerlink" title="SVN 简介"></a>SVN 简介</h1><p>Subversion(SVN) 是一个开源的版本控制系统, SVN管理着随时间改变的数据。 这些数据放置在一个中央资料档案库(repository) 中。 这个档案库很像一个普通的文件服务器, 不过它会记住每一次文件的变动。 这样你就可以把档案恢复到旧的版本, 版本回溯。</p><ul><li>repository（源代码库）:源代码统一存放的地方</li><li>Checkout（提取）:当你手上没有源代码的时候，你需要从repository checkout一份</li><li>Commit（提交）:当你已经修改了代码，你就需要Commit到repository</li><li>Update (更新):当你已经Checkout了一份源代码， Update一下你就可以和Repository上的源代码同步</li></ul><p>日常开发过程使用SVN的步骤，首先你已经Checkout，Update(更新)–&gt;做出自己的修改并调试成功–&gt;Commit(提交)</p><h2 id="windows下安装"><a href="#windows下安装" class="headerlink" title="windows下安装"></a>windows下安装</h2><p>下载地址：<a href="https://sourceforge.net/projects/win32svn/" target="_blank" rel="noopener">https://sourceforge.net/projects/win32svn/</a></p><p>下载完成后，在相应的盘符中会有一个Setup-Subversion-？.？.？.msi的文件，然后双击安装文件进行安装。可以自行选择安装目录，一直Next就可以。</p><p>SVN默认端口号为：443</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>创建仓库：Create Repositories here—-右键—Create  new Repositories—name:test1—一路下一步 </p><p>创建目录结构：选中新建的仓库—右键—新建—folder（文件夹）–folder  name：开发部</p><p>创建用户：选中users—右键—create  user—-user  name:zhangsan，password：空或123456</p><p>创建组：选中groups—右键—create  group—-group name:test–add—勾选已创建用户—确定</p><p>赋权：选中仓库、目录、子目录—-右键—-properties（属性）—add—<br>选择已创建的用户—选择权限（read only或read\write）—确定</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SVN-简介&quot;&gt;&lt;a href=&quot;#SVN-简介&quot; class=&quot;headerlink&quot; title=&quot;SVN 简介&quot;&gt;&lt;/a&gt;SVN 简介&lt;/h1&gt;&lt;p&gt;Subversion(SVN) 是一个开源的版本控制系统, SVN管理着随时间改变的数据。 这些数据放置在一
      
    
    </summary>
    
    
      <category term="Test" scheme="http://yoursite.com/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="http://yoursite.com/2019/04/20/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/04/20/Hexo博客搭建/</id>
    <published>2019-04-20T08:23:10.000Z</published>
    <updated>2019-11-01T01:10:53.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>Hexo 是高效的静态站点生成框架，她基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。在这篇文章中，假定你已经成功安装了 Hexo，并使用 Hexo 提供的命令创建了一个站点。</p><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vx：My19950420</span><br><span class="line">qq：945153590</span><br></pre></td></tr></table></figure><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1、GitHub账号，官网:<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br>2、node.js、npm，下载地址：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a>   中文文档地址：<a href="http://nodejs.cn/api/" target="_blank" rel="noopener">http://nodejs.cn/api/</a><br>3、git for windows 教程参考：<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600</a><br>4、域名，这里我用的是阿里云的域名，当然你也可不绑定域名，那么访问的时候就直接访问XXX.github.io</p><h2 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h2><p>  新建一个名为你的&lt;用户名&gt;.github.io的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效）</p><h3 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"邮件地址"</span> <span class="comment">#不加引号</span></span><br></pre></td></tr></table></figure><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录（C:\Users\你的用户名\.ssh），找到id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key,将刚复制的内容粘贴到key那里，title随便填，保存。</p><h3 id="测试配置是否成功"><a href="#测试配置是否成功" class="headerlink" title="测试配置是否成功"></a>测试配置是否成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com <span class="comment"># 注意邮箱地址不用改</span></span><br></pre></td></tr></table></figure><p>如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：<br>Hi XXXXX! You’ve successfully authenticated, but GitHub does not provide shell access.<br>看到这个信息说明SSH已配置成功！<br>此时你还需要配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"username"</span> <span class="comment"># 你的github用户名，非昵称</span></span><br><span class="line">git config --global user.email  <span class="string">"xxx@qq.com"</span> <span class="comment"># 填写你的github注册邮箱</span></span><br></pre></td></tr></table></figure><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init 项目名 <span class="comment"># 目录具体位置一定要选好，这个是将来存放代码的地方</span></span><br></pre></td></tr></table></figure><p>进入你的项目内：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g # 生成</span><br><span class="line">hexo s # 启动服务</span><br></pre></td></tr></table></figure><p>打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容</p><h3 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h3><p>参考博客：<a href="https://io-oi.me/tech/hexo-next-optimization/" target="_blank" rel="noopener">https://io-oi.me/tech/hexo-next-optimization/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;Hexo 是高效的静态站点生成框架，她基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markd
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
